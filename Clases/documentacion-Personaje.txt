Documentación de la Clase Personaje

La clase `Personaje` modela un personaje en el contexto de un juego de combate inspirado en el universo de **Dragon Ball**. Su diseño integra atributos esenciales como el nivel de poder, la vida, las habilidades y las evoluciones. Además, implementa comportamientos básicos y avanzados mediante métodos que interactúan con estos atributos, ofreciendo una representación robusta y funcional de un personaje.

Entre los atributos principales, `MAX_NIVEL`, `MAX_VIDA` y `MAX_PODER` definen los límites superiores de nivel, vida y poder de un personaje, respectivamente, asegurando un control claro sobre las capacidades máximas. Cada personaje tiene un `nombre`, un `nivel_de_poder` inicial, y una `raza`, que le otorgan identidad y personalización. Para gestionar habilidades, se utiliza un **conjunto (`set`)** que garantiza la unicidad, permitiendo agregar habilidades sin duplicaciones. La vida del personaje se maneja dinámicamente y se inicializa al máximo (`MAX_VIDA`), mientras que las evoluciones, como "Kaioken x2" o "Super Saiyajin", están definidas en un diccionario que asocia cada transformación con un multiplicador de poder. Este diseño facilita la gestión automática de las transformaciones.

Los métodos de la clase están diseñados para interactuar directamente con estos atributos. Por ejemplo, el método `recibir_dano` reduce la vida del personaje según una cantidad específica, y los métodos `esta_vivo` y `esta_muerto` verifican su estado vital, facilitando la lógica de combate. Para restaurar la vida al máximo, se utiliza `reiniciar_vida`. El cálculo de daño se realiza mediante el método `calcular_dano`, que combina el nivel de poder del personaje con un multiplicador basado en la habilidad utilizada. Este enfoque permite modelar habilidades específicas, como "Kamehameha" o "Final Flash", con diferentes niveles de impacto.

En términos de evolución, la clase gestiona las transformaciones mediante un sistema dinámico que permite modificar el nivel de poder según la evolución actual. El método `subir_nivel` garantiza que el nivel de poder no supere el máximo permitido, mientras que `agregar_habilidad` añade nuevas habilidades al personaje, validando que no se repitan. Aunque el uso de un conjunto hace redundante la validación, se incluye para mayor control y claridad del flujo.

El diseño de la clase está profundamente influenciado por los principios de modularidad y reutilización, al implementar las interfaces `INivel` e `IHabilidades`. Esto permite que las funcionalidades de gestión de nivel y habilidades puedan ser extendidas o reutilizadas fácilmente en otras clases. En resumen, la clase `Personaje` no solo proporciona una representación fiel de un personaje en el juego, sino que también asegura que las operaciones asociadas a los combates y progresión sean intuitivas, eficientes y extensibles.

